AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  Domain:
    Type: "String"
  S3Bucket:
    Type: "String"
    NoEcho: true
  Stage:
    Type: "String"
    AllowedValues:
      - dev
      - prod
  UserPoolArn:
    Type: "String"
    NoEcho: true
  UserPoolId:
    Type: "String"
    NoEcho: true
  WebClientId:
    Type: "String"
    NoEcho: true
  StripeSecretKey:
    Type: "String"
    NoEcho: true
  StripeWebhookSecret:
    Type: "String"
    NoEcho: true
  StripePriceId:
    Type: "String"
    NoEcho: true
  EmailUser:
    Type: "String"
    NoEcho: true
  EmailPass:
    Type: "String"
    NoEcho: true
  Salt:
    Type: "String"
    NoEcho: true
  EmitSecret:
    Type: "String"
    NoEcho: true
  SignalEmail:
    Type: "String"
    NoEcho: true
  RHUsername:
    Type: "String"
    NoEcho: true
  RHPassword:
    Type: "String"
    NoEcho: true
  RH2FA:
    Type: "String"
    NoEcho: true
  RHUsername2:
    Type: "String"
    NoEcho: true
  RHPassword2:
    Type: "String"
    NoEcho: true
  RH2FA2:
    Type: "String"
    NoEcho: true

Globals:
  Function:
    Timeout: 30
    MemorySize: 10240

Conditions:
  IsProd:
    !Equals [!Ref Stage, prod]

Resources:
  UIBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      BucketName: !Join [ "", [!If [IsProd, "", "dev."], !Ref Domain ] ]
      WebsiteConfiguration:
        IndexDocument: index.html
  HostedZone: 
    Type: "AWS::Route53::HostedZone"
    Properties: 
      Name: !Join [ "", [!If [IsProd, "", "dev."], !Ref Domain ] ]
  WebSocketApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: !Sub "ws-api-${Stage}"
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: "$request.body.action"
  Certificate:
    Type: AWS::CertificateManager::Certificate
    DependsOn: HostedZone
    Properties:
      DomainName: !Join [ "", [!If [IsProd, "", "dev."], !Ref Domain ] ]
      SubjectAlternativeNames:
        - !Join [ "", ["*.", !If [IsProd, "", "dev."], !Ref Domain ] ]
      DomainValidationOptions:
        - DomainName: !Join [ "", [!If [IsProd, "", "dev."], !Ref Domain ] ]
          HostedZoneId: !Ref HostedZone
      ValidationMethod: DNS
  # WebSocketAuth:
  #   Type: AWS::ApiGatewayV2::Authorizer
  #   Properties:
  #     Name: WebSocketAuth
  #     ApiId: !Ref WebSocketApi
  #     AuthorizerType: JWT
  #     JwtConfiguration:
  #       Audience: 
  #         - audience
  #       Issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}"
  #     IdentitySource:
  #       - "$request.header.Authorization"
  # Could use this instead inside websocket sendMessage fx
  # https://github.com/awslabs/aws-jwt-verify

  WebSocketRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: WebSocketRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref WebSocketIntegration
  WebSocketIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketFunction.Arn}/invocations
  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn: WebSocketRoute
    Properties:
      ApiId: !Ref WebSocketApi
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref Stage
      # DeploymentId: !Ref WebSocketDeployment
      ApiId: !Ref WebSocketApi
      AutoDeploy: true
  WebSocketRouteResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      RouteId: !Ref WebSocketRoute
      ApiId: !Ref WebSocketApi
      RouteResponseKey: $default
  WebSocketDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Join [ "", ["api2.", !If [IsProd, "", "dev."], !Ref Domain ] ]
      DomainNameConfigurations:
        - CertificateArn: !Ref Certificate
          EndpointType: REGIONAL
  WebSocketRecord:
    Type: AWS::Route53::RecordSet
    DependsOn: HostedZone
    Properties:
      Type: A
      Name: !Join [ "", ["api2.", !If [IsProd, "", "dev."], !Ref Domain ] ]
      AliasTarget:
        DNSName: !GetAtt WebSocketDomain.RegionalDomainName
        # EvaluateTargetHealth: Boolean
        HostedZoneId: !GetAtt WebSocketDomain.RegionalHostedZoneId
      HostedZoneId: !Ref HostedZone
  WebSocketMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn: WebSocketDomain
    Properties:
      ApiId: !Ref WebSocketApi
      DomainName: !Join [ "", ["api2.", !If [IsProd, "", "dev."], !Ref Domain ] ]
      Stage: !Ref WebSocketStage
  WebSocketFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 10240 # 10GB
      Timeout: 900 # 15 min
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
          RH_USERNAME: !Ref RHUsername
          RH_PASSWORD: !Ref RHPassword
          RH_2FA: !Ref RH2FA
          RH_USERNAME2: !Ref RHUsername2
          RH_PASSWORD2: !Ref RHPassword2
          RH_2FA2: !Ref RH2FA2
          HOME: /tmp
          REGION: !Ref AWS::Region
          USER_POOL_ID: !Ref UserPoolId
          WEB_CLIENT_ID: !Ref WebClientId
      Policies:
        - Statement:
            - Sid: S3ReadWritePolicy
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: !Sub "arn:aws:s3:::${S3Bucket}/data/robinhood*.pickle"
        - Statement:
            - Sid: ConnectWebSocket
              Effect: Allow
              Action:
                - execute-api:Invoke
                - execute-api:ManageConnections
              # Resource: !Sub "arn:aws:execute-api:::${S3Bucket}/data/robinhood*.pickle"
              Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'
      PackageType: Zip
      CodeUri: trade
      Runtime: python3.9 
      Handler: app.handle_ws
      Layers:
      - !Ref SharedLayer
      # MemorySize: 256
      # Runtime: nodejs14.x
      # Environment:
      #   Variables:
      #     TABLE_NAME: !Ref TableName
      # Policies:
      # - DynamoDBCrudPolicy:
      #     TableName: !Ref TableName
      # - Statement:
      #   - Effect: Allow
      #     Action:
      #     - 'execute-api:ManageConnections'
      #     Resource:
      #     - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/*'
  WebSocketPermission:
    Type: AWS::Lambda::Permission
    DependsOn: WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WebSocketFunction
      Principal: apigateway.amazonaws.com
  # WebSocketFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: index.handler
  #     Timeout: 30
  #     Runtime: nodejs8.10
  #     CodeUri: ./
  #     # Policies:
  #     #   - AWSLambdaFullAccess
  #     #   - CloudWatchLogsFullAccess
  #     #   - AmazonAPIGatewayInvokeFullAccess
  #     #   - AmazonAPIGatewayAdministrator
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    DependsOn: HostedZone
    Properties:
      StageName: !Ref Stage
      Domain:
        DomainName: !Join [ "", ["api.", !If [IsProd, "", "dev."], !Ref Domain ] ]
        CertificateArn: !Ref Certificate
        EndpointConfiguration: EDGE
        Route53:
          HostedZoneId: !Ref HostedZone
      Auth:
        Authorizers:
          CognitoAuth:
            UserPoolArn: !Ref UserPoolArn
  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${Stage}_shared_layer"
      Description: shared api code layer
      ContentUri: shared
      RetentionPolicy: Delete
  AccountFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
          STRIPE_SECRET_KEY: !Ref StripeSecretKey
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      PackageType: Zip
      CodeUri: account
      Runtime: python3.8 
      Handler: app.handle_account
      Layers:
      - !Ref SharedLayer
      Events:
        GetAccount:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /account
            Method: get
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuth
              # header Authorization: id_token from /token endpoint
        PostAccount:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /account
            Method: post
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuth
              # header Authorization: id_token from /token endpoint
        DeleteAccount:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /account
            Method: delete
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuth
              # header Authorization: id_token from /token endpoint
        Options:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /account
            Method: options
            RestApiId: !Ref ApiGatewayApi
  ContactFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          EMAIL_USER: !Ref EmailUser
          EMAIL_PASS: !Ref EmailPass
          STAGE: !Ref Stage
      #     TABLE_NAME: !Ref UsersTable
      # Policies:
      #   - DynamoDBCrudPolicy:
      #       TableName: !Ref UsersTable
      PackageType: Zip
      CodeUri: contact
      Runtime: python3.8 
      Handler: app.handle_contact
      Layers:
      - !Ref SharedLayer
      Events:
        PostContact:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /contact
            Method: post
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuth
              # header Authorization: id_token from /token endpoint
        Options:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /contact
            Method: options
            RestApiId: !Ref ApiGatewayApi
  ExerciseLogFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      PackageType: Zip
      CodeUri: gym
      Runtime: python3.8 
      Handler: app.get_exercise_log
      Events:
        ExerciseLog:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /exercise_log
            Method: get
            RestApiId: !Ref ApiGatewayApi
  PreviewFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
      Policies:
        - Statement:
            - Sid: S3ReadPolicy
              Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub "arn:aws:s3:::${S3Bucket}/data/api/*"
      PackageType: Zip
      CodeUri: preview
      Runtime: python3.8 
      Handler: app.get_preview
      Events:
        Preview:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /preview
            Method: get
            RestApiId: !Ref ApiGatewayApi
  TradeFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      MemorySize: 10240 # 10GB
      Timeout: 900 # 15 min
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
          RH_USERNAME: !Ref RHUsername
          RH_PASSWORD: !Ref RHPassword
          RH_2FA: !Ref RH2FA
          RH_USERNAME2: !Ref RHUsername2
          RH_PASSWORD2: !Ref RHPassword2
          RH_2FA2: !Ref RH2FA2
          HOME: /tmp
          REGION: !Ref AWS::Region
          USER_POOL_ID: !Ref UserPoolId
          WEB_CLIENT_ID: !Ref WebClientId
      Policies:
        - Statement:
            - Sid: S3ReadWritePolicy
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: !Sub "arn:aws:s3:::${S3Bucket}/data/robinhood*.pickle"
      PackageType: Zip
      CodeUri: trade
      Runtime: python3.9 
      Handler: app.handle_trade
      Layers:
      - !Ref SharedLayer
      Events:
        GetTrade:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /trade
            Method: get
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuth
        PostTrade:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /trade
            Method: post
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuth
        Options:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /trade
            Method: options
            RestApiId: !Ref ApiGatewayApi
  ModelFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
      Policies:
        - Statement:
            - Sid: S3ReadPolicy
              Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub "arn:aws:s3:::${S3Bucket}/models/latest/metadata.json"
      PackageType: Zip
      CodeUri: model
      Runtime: python3.8 
      Handler: app.get_model
      Events:
        Model:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /model
            Method: get
            RestApiId: !Ref ApiGatewayApi
  VisualizationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
      Policies:
        - Statement:
            - Sid: S3ReadPolicy
              Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                [
                  !Sub "arn:aws:s3:::${S3Bucket}/models/latest/2D/*",
                  !Sub "arn:aws:s3:::${S3Bucket}/models/latest/3D/*",
                ]
      PackageType: Zip
      CodeUri: model
      Runtime: python3.8 
      Handler: app.get_visualization
      Events:
        Model:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /visualization
            Method: get
            RestApiId: !Ref ApiGatewayApi
  SignalsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
          TABLE_NAME: !Ref UsersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - Statement:
            - Sid: S3ReadPolicy
              Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub "arn:aws:s3:::${S3Bucket}/models/latest/signals.csv"
      PackageType: Zip
      CodeUri: signals
      Runtime: python3.8 
      Handler: app.handle_signals
      Layers:
      - !Ref SharedLayer
      Events:
        Signals:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /signals
            Method: get
            RestApiId: !Ref ApiGatewayApi
        Options:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /signals
            Method: options
            RestApiId: !Ref ApiGatewayApi
  PlansFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          STRIPE_SECRET_KEY: !Ref StripeSecretKey
          TABLE_NAME: !Ref UsersTable
          STRIPE_PRICE_ID: !Ref StripePriceId
      PackageType: Zip
      CodeUri: subscribe
      Runtime: python3.8 
      Handler: app.get_plans
      Layers:
      - !Ref SharedLayer
      Events:
        GetPlans:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /plans
            Method: get
            RestApiId: !Ref ApiGatewayApi
  SubscribeFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          STRIPE_SECRET_KEY: !Ref StripeSecretKey
          STRIPE_WEBHOOK_SECRET: !Ref StripeWebhookSecret
          TABLE_NAME: !Ref UsersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      PackageType: Zip
      CodeUri: subscribe
      Runtime: python3.8 
      Handler: app.post_subscribe
      Layers:
      - !Ref SharedLayer
      Events:
        PostSubscribe:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /subscribe
            Method: post
            RestApiId: !Ref ApiGatewayApi
  NotifyFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      MemorySize: 10240 # 10GB
      Timeout: 900 # 15 min
      Environment:
        Variables:
          SALT: !Ref Salt
          CRYPT_PASS: !Ref RHPassword
          EMIT_SECRET: !Ref EmitSecret
          TABLE_NAME: !Ref UsersTable
          STAGE: !Ref Stage
          SIGNAL_EMAIL: !Ref SignalEmail
          S3_BUCKET: !Ref S3Bucket
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - Statement:
            - Sid: S3ReadPolicy
              Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub "arn:aws:s3:::${S3Bucket}/data/api/*"
        - Statement:
            - Sid: SESSendEmail
              Effect: Allow
              Action:
                - ses:SendEmail
              Resource: "*"
      PackageType: Zip
      CodeUri: notify
      Runtime: python3.8 
      Handler: app.post_notify
      Layers:
      - !Ref SharedLayer
      Events:
        PostNotify:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /notify
            Method: post
            RestApiId: !Ref ApiGatewayApi
  CheckoutFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          STRIPE_SECRET_KEY: !Ref StripeSecretKey
          TABLE_NAME: !Ref UsersTable
          STRIPE_PRICE_ID: !Ref StripePriceId
          STAGE: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      PackageType: Zip
      CodeUri: subscribe
      Runtime: python3.8 
      Handler: app.handle_checkout
      Layers:
      - !Ref SharedLayer
      Events:
        PostCheckout:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /checkout
            Method: post
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuth
              # header Authorization: id_token from /token endpoint
        Options:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /checkout
            Method: options
            RestApiId: !Ref ApiGatewayApi
  BillingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          STRIPE_SECRET_KEY: !Ref StripeSecretKey
          TABLE_NAME: !Ref UsersTable
          STAGE: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      PackageType: Zip
      CodeUri: subscribe
      Runtime: python3.8 
      Handler: app.handle_billing
      Layers:
      - !Ref SharedLayer
      Events:
        PostBilling:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /billing
            Method: post
            RestApiId: !Ref ApiGatewayApi
            Auth:
              Authorizer: CognitoAuth
              # header Authorization: id_token from /token endpoint
        Options:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /billing
            Method: options
            RestApiId: !Ref ApiGatewayApi
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "users-${Stage}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
        - AttributeName: api_key
          AttributeType: S
        - AttributeName: customer_id
          AttributeType: S
        - AttributeName: in_beta
          AttributeType: N
        - AttributeName: subscribed
          AttributeType: N
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: api_key_index
          KeySchema:
            - AttributeName: api_key
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: customer_id_index
          KeySchema:
            - AttributeName: customer_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: in_beta_index
          KeySchema:
            - AttributeName: in_beta
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: subscribed_index
          KeySchema:
            - AttributeName: subscribed
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
Outputs:
  UIBucketName:
    Value: !Ref UIBucket
