name: Deploy UI

on:
  pull_request:
    paths-ignore:
      - src/api/**
      # add path ! for swagger yaml
      - .github/workflows/api.yml
    branches: [master]
  push:
    paths-ignore:
      - src/api/**
      # add path ! for swagger yaml
      - .github/workflows/api.yml
    branches: [master]

  workflow_dispatch:

env:
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Use Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: |
            ~/.cache/Cypress
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          pnpm run ci
          pnpm add -g @apidevtools/swagger-cli@4.0.4 nyc@15.1.0

      - name: Generate aws-exports.js and swagger.json files
        env:
          LOCAL_IDENTITY_POOL_ID: ${{ secrets.LOCAL_IDENTITY_POOL_ID }}
          LOCAL_USER_POOL_ID: ${{ secrets.LOCAL_USER_POOL_ID }}
          LOCAL_WEB_CLIENT_ID: ${{ secrets.LOCAL_WEB_CLIENT_ID }}
          LOCAL_OAUTH_DOMAIN: ${{ secrets.LOCAL_OAUTH_DOMAIN }}
        run: |
          util/aws_exports.sh
          pnpm run swagger

      - name: Build app [${{ fromJSON('["dev","prod"]')[github.ref_name == 'master'] }}]
        run: pnpm run build:ui && echo "CF_DISTRO_ID=${CF_DISTRO_ID}" >> $GITHUB_ENV
        env:
          VITE_APP_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          VITE_APP_IDENTITY_POOL_ID: ${{ fromJSON(format('["{0}","{1}"]', secrets.DEV_IDENTITY_POOL_ID, secrets.IDENTITY_POOL_ID))[github.ref_name == 'master'] }}
          VITE_APP_USER_POOL_ID: ${{ fromJSON(format('["{0}","{1}"]', secrets.DEV_USER_POOL_ID, secrets.USER_POOL_ID))[github.ref_name == 'master'] }}
          VITE_APP_WEB_CLIENT_ID: ${{ fromJSON(format('["{0}","{1}"]', secrets.DEV_WEB_CLIENT_ID, secrets.WEB_CLIENT_ID))[github.ref_name == 'master'] }}
          VITE_APP_OAUTH_DOMAIN: ${{ fromJSON(format('["{0}","{1}"]', secrets.DEV_OAUTH_DOMAIN, secrets.OAUTH_DOMAIN))[github.ref_name == 'master'] }}
          CF_DISTRO_ID: ${{ fromJSON(format('["{0}","{1}"]', secrets.DEV_CF_DISTRO_ID, secrets.CF_DISTRO_ID))[github.ref_name == 'master'] }}
          VITE_COVERAGE: ${{ fromJSON(format('["{0}","{1}"]', true, false))[github.ref_name == 'master'] }}

      - name: Get CF Outputs
        run: |
          AWS_S3_BUCKET=$(aws cloudformation describe-stacks --stack-name api-dev --query 'Stacks[0].Outputs[?OutputKey==`UIBucketName`].OutputValue' --output text)
          echo "AWS_S3_BUCKET=${AWS_S3_BUCKET}" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          STACK_NAME: ${{ fromJSON(format('["{0}","{1}"]', 'api-dev', 'api'))[github.ref_name == 'master'] }}
      
      - name: Deploy UI
        run: aws s3 sync dist s3://${{ env.AWS_S3_BUCKET }} --acl public-read --follow-symlinks --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Invalidate cache
        run: aws cloudfront create-invalidation --distribution-id "${CF_DISTRO_ID}" --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_EC2_METADATA_DISABLED: true
      
      # - name: Wait for invalidation
      #   run: sleep 30s
      
      - name: Run UI tests
        uses: cypress-io/github-action@v5
        id: cypress
        continue-on-error: true
        with:
          record: true
          install: false
          wait-on: 'https://dev.forcepu.sh'
          config-file: cypress.config.ts
          command-prefix: "--"
        env:
          SIGNAL_EMAIL: ${{ secrets.SIGNAL_EMAIL }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          ELECTRON_ENABLE_LOGGING: 1
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
        
      - name: Cypress results
        run: |
          echo Cypress finished with: ${{ steps.cypress.outcome }}
          echo See results at ${{ steps.cypress.outputs.resultsUrl }}
          nyc report --reporter=text
          nyc report --reporter=text-summary
          nyc check-coverage
          exit ${{ fromJSON('["0", "1"]')[steps.cypress.outcome == 'failure'] }}
